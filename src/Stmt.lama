-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval(c@[state, world], stmt) {
  case stmt of
    Skip                 -> c |
    Assn  (x, expr)      -> [state <- [x, evalExpr(state, expr)], world] |
    Write (expr)         -> [state, writeWorld(evalExpr(state, expr), world)] |
    Seq   (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2) |
    Read  (x)            ->
    case readWorld(world) of
      [v, newWorld] -> [state <- [x, v], newWorld]
    esac |
    _                    -> failure("Unexcepted statement %s\n", stmt.string)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, stmt) {
  eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
