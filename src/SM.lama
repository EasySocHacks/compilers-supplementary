-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn(i) {
  case i of
      READ      -> sprintf("READ")
    | WRITE     -> sprintf("WRITE")
    | BINOP (s) -> sprintf("BINOP %s", s)
    | LD    (x) -> sprintf("LD %s", x)
    | ST    (x) -> sprintf("ST %s", x)
    | CONST (n) -> sprintf("CONST %d", n)
  esac
}

public fun showSM(prg) {
  map(fun (i) { showSMInsn(i) +++ "\n" }, prg).stringcat
}

-- Parse binary operation and return function to compute values with it.
fun parseBinop(op) {
  case op of
    "+"  -> (infix +) |
    "-"  -> (infix -) |
    "*"  -> (infix *) |
    "/"  -> (infix /) |
    "%"  -> (infix %) |
    "<"  -> (infix <) |
    ">"  -> (infix >) |
    "<=" -> (infix <=) |
    ">=" -> (infix >=) |
    "==" -> (infix ==) |
    "!=" -> (infix !=) |
    "&&" -> (infix &&) |
    "!!" -> (infix !!) |
    _    -> failure("Unexcepted operation %s\n", op.string)
  esac
}

-- Evaluate single SM instruction.
-- Takes SM-configuration and an instruction.
-- Returns a final configuration.
fun evalInsn(c@[stack, state, world], insn) {
  case insn of
    READ       ->
      case readWorld(world) of
        [x, newWorld] -> [x:stack, state, newWorld]
      esac |
    WRITE      ->
      case stack of
        x : stackRest -> [stackRest, state, writeWorld(x, world)] |
        _             -> failure("Unexpected instruction WRITE: stack is empty\n")
      esac |
    BINOP (op) ->
      case stack of
        y : x : stackRest -> [(parseBinop(op)(x, y)):stackRest, state, world] |
        _                 -> failure("Unexpected BINOP: stack must contains at least two values\n")
      esac |
    LD (x)     -> [state(x):stack, state, world] |
    ST (x)     ->
      case stack of
        value : stackRest -> [stackRest, state <- [x, value], world] |
        _                 -> failure("Unexpected ST: stack must contains at least one value\n")
      esac |
    CONST (v)  -> [v:stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval(c, insns) {
  case insns of
    { }           -> c |
    p : insnsRest -> eval(evalInsn(c, p), insnsRest)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM(input, insns) {
  eval([{ }, emptyState, createWorld(input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr(expr) {
  case expr of
    Var (x)                  -> { LD(x) } |
    Const (v)                -> { CONST(v) } |
    Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ { BINOP(op) } |
    _                        -> failure("Unexcepted expression %s\n", expr.string)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {
  case stmt of
    Skip                 -> { } |
    Assn  (x, expr)      -> compileExpr(expr) +++ { ST(x) } |
    Write (expr)         -> compileExpr(expr) +++ { WRITE } |
    Read  (x)            -> { READ } +++ { ST(x) } |
    Seq   (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2) |
    _                    -> failure("Unexcepted statement %s\n", stmt.string)
  esac
}
