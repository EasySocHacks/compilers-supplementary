-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }


  -- Evaluate single SM instruction.
  -- Takes SM-configuration and an instruction.
  -- Returns a final configuration.
  fun evalInsn(c@[stack, controlStack, state, world], insn) {
    case insn of
        READ       ->
          case readWorld(world) of
            [x, newWorld] -> [x:stack, controlStack, state, newWorld]
          esac
      | WRITE      ->
          case stack of
              x : stackRest -> [stackRest, controlStack, state, writeWorld(x, world)]
            | _             -> failure("Unexpected WRITE: stack is empty\n")
          esac
      | BINOP (op) ->
          case stack of
              y : x : stackRest -> [evalOp(op, x, y):stackRest, controlStack, state, world]
            | _                 -> failure("Unexpected BINOP: stack must contains at least two values\n")
          esac
      | LD (x)     -> [state.lookup(x):stack, controlStack, state, world]
      | LDA (x)    -> [RefVal(x):stack, controlStack, state, world]
      | ST (x)     ->
          case stack of
              value : stackRest ->
                state.assign(x, value);
                [stackRest, controlStack, state, world]
            | _                 -> failure("Unexpected ST: stack must contains at least one value\n")
          esac
      | STI        ->
          case stack of
              value : RefVal(x) : stackRest ->
                state.assign(x, value);
                [value:stackRest, controlStack, state, world]
            | _                     -> failure("Unexpected STI: stack must contains value and ref\n")
          esac
      | CONST (v)  -> [v:stack, controlStack, state, world]
      | LABEL (l)  -> c
      | JMP (l)    -> c
      | CJMP(c, l) ->
          case stack of
              _ : stackRest -> [stackRest, controlStack, state, world]
            | _             -> failure("Unexpected CJMP: stack must be not empty")
          esac
      | CALL -> failure("Something went wrong. CALL op not processing in this function.")
      | BEGIN (funLabel, argCnt, localCnt) ->
          case stack.take(argCnt) of
            [stack, argValues] ->
              case makeState(argCnt, localCnt) of
                state ->
                  foldl(fun(acc, value) {state.assign(Arg(acc), value); acc + 1}, 0, argValues);
                  [stack, controlStack, state, world]
              esac
          esac
      | GLOBAL (x) ->
          state.assign(Glb(x), 0);
          c
      | END -> failure("Something went wrong. END op not processing in this function.")
      | DUP        ->
          case stack of
              x : stackRest -> [x:x:stackRest, controlStack, state, world]
            | _     -> failure("Unexpected DUP: stack must contains at least one value\n")
          esac
      | DROP       ->
          case stack of
              x : stackRest -> [stack, controlStack, state, world]
            | _             -> failure("Unexpected DROP: stack must contains at least one value\n")
          esac
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval(c@[stack, controlStack, state, world], insns) {
    case insns of
      { }           -> c |
      p : insnsRest ->
      case p of
          CALL (fl, _) -> eval([stack, [state, insnsRest]:controlStack, state, world], env.fromLabel(fl))
        | END ->
          case controlStack of
              {} -> c
            | [state, prog]:controlStackRest -> eval([stack, controlStackRest, state, world], prog)
          esac
        | _ ->
          case evalInsn(c, p) of
            c ->
              case p of
                  JMP (l)        -> eval(c, fromLabel(env, l))
                | CJMP (flag, l) ->
                  case stack of
                    x : stackRest ->
                      case [flag, x] of
                          ["z", 0]  -> eval(c, fromLabel(env, l))
                        | ["z", x]  -> eval(c, insnsRest)
                        | ["nz", 0] -> eval(c, insnsRest)
                        | ["nz", x] -> eval(c, fromLabel(env, l))
                        | _         -> failure("Unexpected CJMP arguments")
                      esac
                  esac
                | _              -> eval(c, insnsRest)
              esac
          esac
      esac
    esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

fun compileGlobalVars(env, names) {
  case names of
      {} -> emptyBuffer ()
    | name : names ->
      case lookupVar(env, name) of
          Glb (x) -> singletonBuffer (GLOBAL (x)) <+> compileGlobalVars(env, names)
        | _       -> compileGlobalVars(env, names)
      esac
  esac
}

fun addFuns (env, def_list) {
  case def_list of
      {}    -> env
    | def : def_list  ->
      case def of
          Var (names) -> addFuns(env, def_list)
        | Fun (name, args, body) ->
          case genFunLabel(env, name) of
            [fLab, env] -> addFuns(rememberFun(env, fLab, args, body), def_list)
          esac
      esac
  esac
}

fun addDefs (lab, env, def_list) {
  case def_list of
      {}    -> [0, false, env, emptyBuffer ()]
    | def : def_list  ->
      case def of
          Var (names) ->
            case addDefs(lab, addVars(env, names), def_list) of
              [k, false, env, code] -> [k + if isGlobal(env) then 0 else names.size fi, false, env, compileGlobalVars(env, names) <+> code]
            esac
        | Fun (name, args, body) ->
            case genFunLabel(env, name) of
              [fLab, env] -> addDefs(lab, addFun(env, name, fLab, args.size), def_list)
            esac
      esac
  esac
}


-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile(lab, env, expr) {
    case expr of
        Skip               -> [false, env, emptyBuffer()]
      | Var    (x)         -> [false, env, singletonBuffer(LD(env.lookupVar(x)))]
      | Ref    (x)         -> [false, env, singletonBuffer(LDA(env.lookupVar(x)))]
      | Const  (n)         -> [false, env, singletonBuffer(CONST(n))]
      | Read  (x)          -> [false, env, singletonBuffer(READ) <+ ST(env.lookupVar(x))]
      | Ignore (e)         ->
        case compile(lab, env, e) of
          [labUsed, env, code] -> [labUsed, env, code <+> label(lab, labUsed) <+ DROP]
        esac
      | Binop (op, e1, e2) ->
        case genLabels(env, 2) of
          [e1Lab, e2Lab, env] ->
            case compile(e1Lab, env, e1) of
              [e1LabUsed, env, e1Code] ->
                case compile(e2Lab, env, e2) of
                  [e2LabUsed, env, e2Code] -> [false, env, e1Code <+> label(e1Lab, e1LabUsed) <+> e2Code <+> label(e2Lab, e2LabUsed) <+ BINOP(op)]
                esac
            esac
        esac
      | Write (e)          ->
        case genLabel(env) of
          [lab, env] ->
            case compile(lab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ WRITE]
            esac
        esac
      | Assn  (e1, e2)     ->
        case genLabels(env, 2) of
          [lab1, lab2, env] ->
            case compile(lab1, env, e1) of
              [lab1Used, env, code1] ->
                case compile(lab2, env, e2) of
                  [lab2Used, env, code2] -> [false, env, code1 <+> label(lab1, lab1Used) <+> code2 <+> label(lab2, lab2Used) <+ STI]
                esac
            esac
        esac
      | Seq   (e1, e2)     ->
        case env.genLabel of
          [e1Lab, env] ->
            case compile(e1Lab, env, e1) of
              [e1LabUsed, env, e1Code] ->
                case compile(lab, env, e2) of
                  [labUsed, env, e2Code] -> [labUsed, env, e1Code <+> label(e1Lab, e1LabUsed) <+> e2Code]
                esac
            esac
        esac
      | If (e, e1, e2) ->
        case compile(lab, env, e) of
          [_, env, eCode] ->
            case env.genLabels(3) of
              [e1Lab, e2Lab, fLab, env] ->
                case compile(e1Lab, env, e1) of
                  [e1LabUsed, env, e1Code] ->
                    case compile(e2Lab, env, e2) of
                      [e2LabUsed2, env, e2Code] ->
                        [false, env, eCode <+ CJMP("nz", e1Lab) <+> e2Code <+ JMP(fLab) <+> label(e1Lab, true) <+> e1Code <+> label(fLab, true)]
                    esac
                esac
            esac
        esac
      | While (e1, e2)     ->
        case genLabels(env, 3) of
          [e2BeginLabel, e2EndLabel, e1Lab, env] ->
            case compile(e2EndLabel, env, e2) of
              [_, env, e2Code] ->
                case compile(e1Lab, env, e1) of
                  [e1LabUsed, env, e1Code] -> [false, env, singletonBuffer(JMP(e2EndLabel)) <+ LABEL(e2BeginLabel) <+> e2Code <+ LABEL(e2EndLabel) <+> e1Code <+> label(e1Lab, e1LabUsed) <+ CJMP("nz", e2BeginLabel)]
                esac
            esac
        esac
      | DoWhile (e1, e2)   ->
        case genLabels(env, 3) of
          [e1BeginLabel, e1EndLabel, e2Lab, env] ->
            case compile(e1EndLabel, env, e1) of
              [e1EndLabelUsed, env, e1Code] ->
                case compile(e2Lab, env, e2) of
                  [e2LabUsed, env, e2Code] -> [false, env, singletonBuffer(LABEL(e1BeginLabel)) <+> e1Code <+> label(e1EndLabel, e1EndLabelUsed) <+> e2Code <+> label(e2Lab, e2LabUsed) <+ CJMP("nz", e1BeginLabel)]
                esac
            esac
        esac
      | Scope (defs, expr) ->
        case genLabels(env, 2) of
          [defLab, scopeLab, env] ->
            case beginScope(env) of
              env ->
                case addDefs(defLab, env, defs) of
                  [kLocals, _, env, defCode] ->
                    case addFuns(env, defs) of
                      env ->
                        case compile(scopeLab, env, expr) of
                          [_, env, scopeCode] -> [false, endScope(env), defCode <+> scopeCode]
                        esac
                    esac
                esac
            esac
        esac
      | Call (name, args) ->
        case env.lookupFun (name) of
          Fun (funLabel, nargs) ->
            if nargs == size (args)
              then case foldl (fun ([env, code], arg) {
                case genLabel (env) of
                  [lab, env] -> case compile (lab, env, arg) of
                    [labUsed, env, argCode] -> [env, code <+> argCode <+> label (lab, labUsed)]
                  esac
                esac
              }, [env, emptyBuffer ()], args) of
                [env, code] -> [false, env, code <+ CALL (funLabel, size (args))]
              esac
              else error (sprintf ("wrong number of arguments for ""%s"", extected %d, found %d", name, nargs, size (args)), getLoc (name))
            fi
        esac
      | _                  -> failure("Unexcepted expression %s\n", expr.string)
    esac
  }

  fun compileFunctions (env, code) {
    fun helper (env, funs) {
      case funs of
          {} ->
            case getFuns (env) of
                [{}, env] -> emptyBuffer ()
              | [funs, env] -> helper (env, funs)
            esac
        | Fun (fLabel, args, body, state) : funs ->
            case genLabel (addArgs (env.beginFun (state), args)) of
              [l, env] ->
                case compile (l, env, body) of
                  [lUsed, env, code] ->
                    singletonBuffer (LABEL (fLabel))
                      <+ BEGIN (fLabel, args.size, env.getLocals)
                      <+> code
                      <+> label (l, lUsed)
                      <+ END
                      <+> helper (env, funs)
                esac
            esac
      esac
    }

    code <+> helper (env, {})
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, expr) of
         [endLabUsed, env, code] ->
           getBuffer $ compileFunctions (
             env,
             singletonBuffer (LABEL ("main"))
               <+ BEGIN ("main", 0, env.getLocals)
               <+> code
               <+> label (endLab, endLabUsed)
               <+ END
           )
       esac
  esac
}

