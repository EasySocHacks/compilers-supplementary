-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta expr({
    [Left, {
      [s("!!"), fun (l, op, r) { Binop(op, Binop("!=", l, Const(0)), Binop("!=", r, Const(0))) }]
    }],
    [Left, {
      [s("&&"), fun (l, op, r) { Binop(op, Binop("!=", l, Const(0)), Binop("!=", r, Const(0))) }]
    }],
    [Nona, {
      [s("=="), fun (l, op, r) { Binop(op, l, r) }],
      [s("!="), fun (l, op, r) { Binop(op, l, r) }],
      [s("<="), fun (l, op, r) { Binop(op, l, r) }],
      [s("<"), fun (l, op, r) { Binop(op, l, r) }],
      [s(">="), fun (l, op, r) { Binop(op, l, r) }],
      [s(">"), fun (l, op, r) { Binop(op, l, r) }]
    }],
    [Left, {
      [s("+"), fun (l, op, r) { Binop(op, l, r) }],
      [s("-"), fun (l, op, r) { Binop(op, l, r) }]
    }],
    [Left, {
      [s("*"), fun (l, op, r) { Binop(op, l, r) }],
      [s("/"), fun (l, op, r) { Binop(op, l, r) }],
      [s("%"), fun (l, op, r) { Binop(op, l, r) }]
    }]
  }, primary);

var nonSeqStmt = memo $ eta syntax (
    kSkip { Skip }
  | kRead x=inbr[s("("), lident, s(")")] { Read(x) }
  | kWrite x=inbr[s("("), exp, s(")")] { Write(x) }
  | x=lident s[":="] v=exp { Assn(x, v) }
);

var stmt = memo $ eta syntax (
    s1=nonSeqStmt s[";"] s2=stmt { Seq(s1, s2) }
  | nonSeqStmt
);


-- Public top-level parser
public parse = stmt;
             
